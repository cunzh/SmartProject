
# 指定日志输出级别与日志输出位置的名字
log4j.rootLogger=INFO, Fileappender,C

# 指定按日期输出
log4j.appender.Fileappender=org.apache.log4j.DailyRollingFileAppender

log4j.appender.C=org.apache.log4j.ConsoleAppender
# 日志文件名字
log4j.appender.Fileappender.File=${webApp.root}../logs/dailyRollingFile.log
# 每天生成
log4j.appender.Fileappender.DatePattern = '.'yyyy-MM-dd
# 可灵活指定布局模式
log4j.appender.Fileappender.layout=org.apache.log4j.PatternLayout

log4j.appender.C.layout=org.apache.log4j.PatternLayout

# %m   输出代码中指定的消息
# %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
# %r   输出自应用启动到输出该log信息耗费的毫秒数 
# %c   输出所属的类目，通常就是所在类的全名 
# %t   输出产生该日志事件的线程名 
# %n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
# %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
# %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
log4j.appender.Fileappender.layout.ConversionPattern=%d{yyyy MM dd HH:mm:ss,SSS} [%t] [%l] %-5p %c %x - %m%n

log4j.appender.C.layout.ConversionPattern=%d{yyyy MM dd HH:mm:ss,SSS} [%t] [%l] [%F] %-5p %c %x - %m%n
